{"version":3,"file":"Toggle.stories-7b80161b.js","sources":["../../src/components/Toggle/index.tsx"],"sourcesContent":["import React, { useId, useState } from 'react';\nimport cx from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faCircleXmark,\n    faCircleCheck\n} from '@fortawesome/free-solid-svg-icons';\nimport type { BaseProps, LevelType, SizeType } from '../types';\nimport Text from '../Text';\nimport styles from './Toggle.module.scss';\nimport Box from '../Box';\n\nexport interface ToggleProps {\n    readonly level?: LevelType;\n    readonly size?: SizeType;\n    readonly onToggle?: () => void;\n    readonly disabled?: boolean;\n}\n\nconst Toggle = ({\n    className,\n    as = 'label',\n    testId = 'Toggle',\n    level = 'primary',\n    size = 'medium',\n    onToggle = () => null,\n    disabled,\n    children,\n    ...restProps\n}: BaseProps & ToggleProps) => {\n    const [toggled, setToggled] = useState(false);\n    const inputId = useId();\n    const describedById = useId();\n\n    const handleToggle = () => {\n        setToggled(!toggled);\n        onToggle();\n    };\n\n    return (\n        <Text\n            as={as}\n            data-testid={testId}\n            size={size}\n            weight=\"medium\"\n            className={cx(\n                styles.this,\n                { [styles.disabled]: disabled },\n                className\n            )}\n            htmlFor={inputId}\n            {...restProps}\n        >\n            <Box\n                as=\"span\"\n                gutter={size}\n                elevation={toggled ? 'large' : 'medium'}\n                data-testid={`${testId}-inner`}\n                className={cx(styles.inner, styles[`level-${level}`], {\n                    [styles.toggled]: toggled\n                })}\n            >\n                <input\n                    className={styles.checkbox}\n                    id={inputId}\n                    aria-describedby={describedById}\n                    onClick={handleToggle}\n                    disabled={disabled}\n                    type=\"checkbox\"\n                />\n                <FontAwesomeIcon\n                    icon={toggled ? faCircleCheck : faCircleXmark}\n                />\n                <span id={describedById}>{children}</span>\n            </Box>\n        </Text>\n    );\n};\n\nToggle.displayName = 'Toggle';\nexport default Toggle;\n"],"names":["Toggle","className","as","testId","level","size","onToggle","disabled","children","restProps","toggled","setToggled","useState","inputId","useId","describedById","handleToggle","jsx","Text","cx","styles","jsxs","Box","FontAwesomeIcon","faCircleCheck","faCircleXmark","Toggle$1"],"mappings":"ipBAmBAA,EAAA,CAAA,CAAgB,UAAAC,EACZ,GAAAC,GAAA,QACK,OAAAC,EAAA,SACI,MAAAC,GAAA,UACD,KAAAC,EAAA,SACD,SAAAC,GAAA,IAAA,KACU,SAAAC,EACjB,SAAAC,GACA,GAAAC,EAEJ,IAAA,CACI,KAAA,CAAAC,EAAAC,EAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAAA,QACAC,EAAAD,EAAAA,QAEAE,GAAA,IAAA,CACIL,GAAA,CAAAD,CAAA,EACAJ,IAAS,EAGb,OAAAW,EAAA,IACIC,GAAC,CAAA,GAAAhB,GACG,cAAAC,EACa,KAAAE,EACb,OAAA,SACO,UAAAc,EACIC,EAAA,KACA,CAAA,CAAAA,EAAA,QAAA,EAAAb,CAAA,EACuBN,CAC9B,EACJ,QAAAY,EACS,GAAAJ,GACL,SAAAY,EAAA,KAEJC,GAAC,CAAA,GAAA,OACM,OAAAjB,EACK,UAAAK,EAAA,QAAA,SACuB,cAAA,GAAAP,CAAA,SACT,UAAAgB,EAAAC,EAAA,MAAAA,EAAA,SAAAhB,EAAA,EAAA,EAAA,CACgC,CAAAgB,EAAA,OAAA,EAAAV,CAChC,CAAA,EACrB,SAAA,CAEDO,EAAA,IAAA,QAAC,CAAA,UAAAG,EAAA,SACqB,GAAAP,EACd,mBAAAE,EACc,QAAAC,GACT,SAAAT,EACT,KAAA,UACK,CAAA,EACTU,EAAA,IACAM,GAAC,CAAA,KAAAb,EAAAc,GAAAC,EACmC,CAAA,EACpCR,EAAAA,IAAA,OAAA,CAAA,GAAAF,EAAA,SAAAP,EAAA,CAAA,CACmC,CAAA,CAAA,CACvC,CAAA,CAGZ,EAEAR,EAAA,YAAA,SACA,MAAA0B,GAAA1B"}